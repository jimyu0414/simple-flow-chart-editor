{"ast":null,"code":"var _jsxFileName = \"/Users/yu/Downloads/flow-chart/client/src/Components/ToggleableText.js\";\nimport React from 'react';\n\nclass ToggleableText extends React.Component {\n  constructor() {\n    super();\n\n    this.changeToEditMode = () => {\n      this.setState({\n        isEditMode: true\n      });\n    };\n\n    this.handleTextChange = event => {\n      this.setState({\n        text: event.target.value\n      });\n    };\n\n    this.submitText = () => {\n      this.setState({\n        isEditMode: false\n      });\n      this.props.changeShapeTextName(this.state.text, this.props.id);\n    };\n\n    this.state = {\n      isEditMode: false,\n      text: ''\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      text: this.props.name\n    });\n  }\n\n  render() {\n    if (this.state.isEditMode) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.state.text,\n        onChange: this.handleTextChange //to stop the input to move with its shape\n        ,\n        onMouseDown: e => e.stopPropagation(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.submitText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Submit\"));\n    } else {\n      return React.createElement(\"p\", {\n        onDoubleClick: this.changeToEditMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.state.text);\n    }\n  }\n\n}\n\nexport default ToggleableText;","map":{"version":3,"sources":["/Users/yu/Downloads/flow-chart/client/src/Components/ToggleableText.js"],"names":["React","ToggleableText","Component","constructor","changeToEditMode","setState","isEditMode","handleTextChange","event","text","target","value","submitText","props","changeShapeTextName","state","id","componentDidMount","name","render","e","stopPropagation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,cAAN,SAA6BD,KAAK,CAACE,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdC,gBAhBc,GAgBK,MAAK;AACtB,WAAKC,QAAL,CACE;AACEC,QAAAA,UAAU,EAAE;AADd,OADF;AAKD,KAtBa;;AAAA,SAyBdC,gBAzBc,GAyBMC,KAAD,IAAU;AACzB,WAAKH,QAAL,CACE;AACAI,QAAAA,IAAI,EAAED,KAAK,CAACE,MAAN,CAAaC;AADnB,OADF;AAKD,KA/BW;;AAAA,SAiCdC,UAjCc,GAiCD,MAAK;AAChB,WAAKP,QAAL,CACE;AACAC,QAAAA,UAAU,EAAE;AADZ,OADF;AAKA,WAAKO,KAAL,CAAWC,mBAAX,CAA+B,KAAKC,KAAL,CAAWN,IAA1C,EAA+C,KAAKI,KAAL,CAAWG,EAA1D;AACD,KAxCa;;AAEZ,SAAKD,KAAL,GAAa;AACXT,MAAAA,UAAU,EAAE,KADD;AAEXG,MAAAA,IAAI,EAAE;AAFK,KAAb;AAID;;AAEDQ,EAAAA,iBAAiB,GAAE;AACjB,SAAKZ,QAAL,CACE;AACEI,MAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWK;AADnB,KADF;AAKD;;AA4BDC,EAAAA,MAAM,GAAE;AAEJ,QAAG,KAAKJ,KAAL,CAAWT,UAAd,EAAyB;AACvB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,YAAY,EAAE,KAAKS,KAAL,CAAWN,IAFzB;AAGA,QAAA,QAAQ,EAAE,KAAKF,gBAHf,CAIA;AAJA;AAKA,QAAA,WAAW,EAAEa,CAAC,IAAIA,CAAC,CAACC,eAAF,EALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAQC;AAAQ,QAAA,OAAO,EAAE,KAAKT,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARD,CADF;AAYD,KAbD,MAaM;AACF,aACE;AAAG,QAAA,aAAa,EAAE,KAAKR,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKW,KAAL,CAAWN,IADb,CADF;AAIH;AAEJ;;AAjE0C;;AAmE7C,eAAeR,cAAf","sourcesContent":["import React from 'react';\r\nclass ToggleableText extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      isEditMode: false,\r\n      text: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState(\r\n      {\r\n        text: this.props.name\r\n      }\r\n    );\r\n  }\r\n\r\n  changeToEditMode = () =>{\r\n    this.setState(\r\n      {\r\n        isEditMode: true\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  handleTextChange = (event) =>{\r\n      this.setState(\r\n        {\r\n        text: event.target.value\r\n        }\r\n    );\r\n    }\r\n\r\n  submitText = () =>{\r\n    this.setState(\r\n      {\r\n      isEditMode: false\r\n      }\r\n  );\r\n    this.props.changeShapeTextName(this.state.text,this.props.id)\r\n  }\r\n\r\n  render(){\r\n\r\n      if(this.state.isEditMode){\r\n        return(\r\n          <div>\r\n          <input\r\n          type=\"text\"\r\n          defaultValue={this.state.text}\r\n          onChange={this.handleTextChange}\r\n          //to stop the input to move with its shape\r\n          onMouseDown={e => e.stopPropagation()}\r\n           />\r\n           <button onClick={this.submitText}>Submit</button>\r\n           </div>\r\n        )\r\n      }else {\r\n          return(\r\n            <p onDoubleClick={this.changeToEditMode}\r\n            >{this.state.text}</p>\r\n          )\r\n      }\r\n\r\n  }\r\n}\r\nexport default ToggleableText;\r\n"]},"metadata":{},"sourceType":"module"}